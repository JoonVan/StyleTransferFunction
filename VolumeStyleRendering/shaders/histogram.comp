#version 430 compatibility
#extension GL_ARB_shader_image_load_store : require
layout (local_size_x = 8, local_size_y = 8, local_size_z = 4) in;

layout(binding=0, r8ui) uniform readonly uimage3D volume;
layout(binding=1, r32ui) uniform volatile uimage1D globalHistogram;

shared uint histogram[256];
shared uint maxValue;

void main()
{
    // only one thread initializes shared variables
    if(gl_LocalInvocationIndex == 0)
    {
        for(int i = 0; i < 256; i++)
        {
            histogram[i] = 0;
        }

        maxValue = 0;
    }
    
    // get current pixel opacity
    ivec3 readPos = ivec3(gl_GlobalInvocationID);
    uint value = imageLoad(volume, readPos).r;

    // write to shared memory
    atomicAdd(histogram[value], 1U);
    atomicMax(maxValue, histogram[value]);

    // synchronize
    barrier();
    memoryBarrierShared();

    // imageAtomicMax(globalHistogram, int(gl_LocalInvocationIndex), histogram[0]);
    if(gl_LocalInvocationIndex == 0)
    {
        for(int i = 0; i < 256; i++)
        {
            imageAtomicAdd(globalHistogram, i, histogram[i]);
        }
    }
}
